
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

R > # use custom package library
R > .libPaths("/global/scratch/nhejazi/R")
R > 
R > # packages
R > library(here)
here() starts at /global/home/users/nhejazi/medshift-meta/simulations
R > library(foreach)
R > library(future)
R > library(doFuture)
Loading required package: globals
Loading required package: iterators
Loading required package: parallel
R > library(data.table)
R > library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.2.1 --
v ggplot2 3.2.0     v purrr   0.3.2
v tibble  2.1.3     v dplyr   0.8.1
v tidyr   0.8.3     v stringr 1.4.0
v readr   1.3.1     v forcats 0.4.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x purrr::accumulate() masks foreach::accumulate()
x dplyr::between()    masks data.table::between()
x dplyr::filter()     masks stats::filter()
x dplyr::first()      masks data.table::first()
x dplyr::lag()        masks stats::lag()
x dplyr::last()       masks data.table::last()
x purrr::transpose()  masks data.table::transpose()
x purrr::when()       masks foreach::when()
R > library(hal9001)
Loading required package: Rcpp
hal9001 v0.2.2: The Scalable Highly Adaptive Lasso
R > library(sl3)
R > library(medshift)
medshift v0.1.1: Causal Mediation Analysis for Stochastic Interventions
R > 
R > # load scripts, parallelization, PRNG
R > source(here("R", "01_setup_data.R"))
R > source(here("R", "04_test_de.R"))
R > options(future.globals.maxSize = 10^12)
R > registerDoFuture()
R > plan(multiprocess, workers = 24)
R > seed_int <- 7491
R > set.seed(seed_int)
R > 
R > # sample sizes with root-n spacing: n = {100,...,6400}
R > n_obs <- (cumsum(rep(sqrt(100), 7))^2)[-1]
R > 
R > # simulation parameters
R > n_sim <- 1000                         # number of simulations
R > est_type <- "ipsi"                    # incremental propensity score
R > v_folds <- 5                          # set no. cross-validation folds
R > 
R > # sequential loop over different sample sizes
R > sim_results <- lapply(seq_along(n_obs), function(samp_iter) {
...     # parallelized loop over iterations in the simulation
...     results <- foreach(sim_iter = seq_len(n_sim),
...                        .options.multicore = list(preschedule = FALSE),
...                        .errorhandling = "remove",
...                        .combine = c) %dopar% {
...         # simulate data with no direct effect
...         data_sim <- sim_mediation_data(n_obs = n_obs[samp_iter],
...                                        est_type = est_type,
...                                        sim_type = "h0_test")
... 
...         # perform hypothesis test
...         out <- test_de_h0(W = data_sim[[1]],
...                           A = data_sim[[2]],
...                           Z = data_sim[[3]],
...                           Y = data_sim[[4]],
...                           v_folds = v_folds)
...         out
...     }
...     return(results)
... })
R > 
R > # save results to file
R > names(sim_results) <- paste("n", n_obs, sep = "_")
R > timestamp <- str_replace_all(Sys.time(), " ", "_")
R > saveRDS(object = sim_results,
...         file = here("data", paste0("medshift_binary_testh0_", timestamp,
...                                    "_jrssb.rds")))
R > 
> proc.time()
      user     system    elapsed 
236392.962   8268.968   9664.627 
