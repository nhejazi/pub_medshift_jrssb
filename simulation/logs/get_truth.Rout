
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

R > # get truth under simple simulation
R > get_sim_truth <- function(n_obs = 1e7,    # number of observations
...                           n_w = 3,        # number of baseline covariates
...                           p_w = 0.5,      # probability of success in baseline
...                           tx_mult = 2,    # effect of W = 1 on treatment
...                           delta = 0.5) {  # value of shift parameter
...   # packages
...   require(hal9001)
...   require(sl3)
... 
...   # HAL learners
...   g_lrnr <- e_lrnr <- Lrnr_hal9001$new(fit_type = "glmnet", n_folds = 5,
...                                        family = "binomial")
...   m_lrnr <- phi_lrnr <- Lrnr_hal9001$new(fit_type = "glmnet", n_folds = 5)
... 
...   # baseline covariate -- simple, binary
...   W <- as.matrix(replicate(n_w, rbinom(n_obs, 1, prob = p_w)))
... 
...   # create treatment based on baseline W
...   A <- as.numeric(rbinom(n_obs, 1, prob = (rowSums(W) / 4 + 0.1)))
... 
...   # mediators to affect the outcome
...   ## 1st mediator (binary)
...   z1_prob <- (A + W[, 1]^2 + runif(n_obs, 0, 0.1)) / max(A + W[, 3] + 0.1)
...   Z_1 <- rbinom(n_obs, 1, prob = z1_prob)
...   ## 2nd mediator (binary)
...   z2_form <- (A - 1)^3 + W[, 2] - W[, 3] + runif(n_obs, 0, 0.2)
...   z2_prob <- abs(z2_form) / max(abs(z2_form))
...   z2_prob <- z2_prob + runif(n_obs, 0, 1 - max(z2_prob))
...   Z_2 <- rbinom(n_obs, 1, prob = z2_prob)
...   ## 3rd mediator (binary)
...   z3_form <- (A - 1)^2 + 2 * W[, 1]^3 + rnorm(n_obs)
...   z3_prob <- abs(z3_form) / max(abs(z3_form))
...   Z_3 <- rbinom(n_obs, 1, prob = z3_prob)
...   ## build matrix of mediators
...   Z <- cbind(Z_1, Z_2, Z_3)
... 
...   # create outcome as a linear function of A, W + white noise
...   Y <- Z_1 + Z_2 - Z_3 + A - 0.1 * rowSums(W)^2 +
...       rnorm(n_obs, mean = 0, sd = 0.5)
... 
...   # make data structure
...   data <- data.table::as.data.table(cbind(Y, Z, A, W))
...   w_names <- paste("W", seq_len(dim(W)[2]), sep = "_")
...   z_names <- paste("Z", seq_len(dim(Z)[2]), sep = "_")
...   data.table::setnames(data, c("Y", z_names, "A", w_names))
... 
...   # compute TRUE G
...   g_true <- medshift:::fit_g_mech(data = data, delta = delta,
...                                   lrnr_stack = g_lrnr,
...                                   w_names = w_names)
... 
...   # compute TRUE M
...   m_true <- medshift:::fit_m_mech(data = data, lrnr_stack = m_lrnr,
...                                   z_names = z_names, w_names = w_names)
... 
...   # compute TRUE E
...   e_true <- medshift:::fit_e_mech(data = data, lrnr_stack = e_lrnr,
...                                   z_names = z_names, w_names = w_names)
... 
...   # output: true values of nuisance parameters
...   return(list(g_true, m_true, e_true))
... }
R > 
R > sim_truth <- get_sim_truth()
Loading required package: hal9001
Loading required package: Rcpp
hal9001 v0.2.0: The Scalable Highly Adaptive Lasso
Loading required package: sl3
Failed on Lrnr_hal9001_NULL_glmnet_5_TRUE_NULL
Error in make_design_matrix(X, basis_list) : std::bad_alloc
Calls: get_sim_truth ... <Anonymous> -> <Anonymous> -> <Anonymous> -> <Anonymous>
Execution halted
